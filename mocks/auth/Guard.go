// Code generated by mockery. DO NOT EDIT.

package auth

import (
	auth "github.com/goravel/framework/contracts/auth"
	mock "github.com/stretchr/testify/mock"
)

// Guard is an autogenerated mock type for the Guard type
type Guard struct {
	mock.Mock
}

type Guard_Expecter struct {
	mock *mock.Mock
}

func (_m *Guard) EXPECT() *Guard_Expecter {
	return &Guard_Expecter{mock: &_m.Mock}
}

// Check provides a mock function with given fields:
func (_m *Guard) Check() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Check")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Guard_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type Guard_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
func (_e *Guard_Expecter) Check() *Guard_Check_Call {
	return &Guard_Check_Call{Call: _e.mock.On("Check")}
}

func (_c *Guard_Check_Call) Run(run func()) *Guard_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Guard_Check_Call) Return(_a0 bool) *Guard_Check_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Guard_Check_Call) RunAndReturn(run func() bool) *Guard_Check_Call {
	_c.Call.Return(run)
	return _c
}

// Guest provides a mock function with given fields:
func (_m *Guard) Guest() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Guest")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Guard_Guest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Guest'
type Guard_Guest_Call struct {
	*mock.Call
}

// Guest is a helper method to define mock.On call
func (_e *Guard_Expecter) Guest() *Guard_Guest_Call {
	return &Guard_Guest_Call{Call: _e.mock.On("Guest")}
}

func (_c *Guard_Guest_Call) Run(run func()) *Guard_Guest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Guard_Guest_Call) Return(_a0 bool) *Guard_Guest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Guard_Guest_Call) RunAndReturn(run func() bool) *Guard_Guest_Call {
	_c.Call.Return(run)
	return _c
}

// HasUser provides a mock function with given fields:
func (_m *Guard) HasUser() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasUser")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Guard_HasUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasUser'
type Guard_HasUser_Call struct {
	*mock.Call
}

// HasUser is a helper method to define mock.On call
func (_e *Guard_Expecter) HasUser() *Guard_HasUser_Call {
	return &Guard_HasUser_Call{Call: _e.mock.On("HasUser")}
}

func (_c *Guard_HasUser_Call) Run(run func()) *Guard_HasUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Guard_HasUser_Call) Return(_a0 bool) *Guard_HasUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Guard_HasUser_Call) RunAndReturn(run func() bool) *Guard_HasUser_Call {
	_c.Call.Return(run)
	return _c
}

// Id provides a mock function with given fields:
func (_m *Guard) Id() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Id")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Guard_Id_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Id'
type Guard_Id_Call struct {
	*mock.Call
}

// Id is a helper method to define mock.On call
func (_e *Guard_Expecter) Id() *Guard_Id_Call {
	return &Guard_Id_Call{Call: _e.mock.On("Id")}
}

func (_c *Guard_Id_Call) Run(run func()) *Guard_Id_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Guard_Id_Call) Return(_a0 string) *Guard_Id_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Guard_Id_Call) RunAndReturn(run func() string) *Guard_Id_Call {
	_c.Call.Return(run)
	return _c
}

// SetUser provides a mock function with given fields: _a0
func (_m *Guard) SetUser(_a0 interface{}) auth.Guard {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetUser")
	}

	var r0 auth.Guard
	if rf, ok := ret.Get(0).(func(interface{}) auth.Guard); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(auth.Guard)
		}
	}

	return r0
}

// Guard_SetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUser'
type Guard_SetUser_Call struct {
	*mock.Call
}

// SetUser is a helper method to define mock.On call
//   - _a0 interface{}
func (_e *Guard_Expecter) SetUser(_a0 interface{}) *Guard_SetUser_Call {
	return &Guard_SetUser_Call{Call: _e.mock.On("SetUser", _a0)}
}

func (_c *Guard_SetUser_Call) Run(run func(_a0 interface{})) *Guard_SetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Guard_SetUser_Call) Return(_a0 auth.Guard) *Guard_SetUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Guard_SetUser_Call) RunAndReturn(run func(interface{}) auth.Guard) *Guard_SetUser_Call {
	_c.Call.Return(run)
	return _c
}

// User provides a mock function with given fields:
func (_m *Guard) User() *interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for User")
	}

	var r0 *interface{}
	if rf, ok := ret.Get(0).(func() *interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interface{})
		}
	}

	return r0
}

// Guard_User_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'User'
type Guard_User_Call struct {
	*mock.Call
}

// User is a helper method to define mock.On call
func (_e *Guard_Expecter) User() *Guard_User_Call {
	return &Guard_User_Call{Call: _e.mock.On("User")}
}

func (_c *Guard_User_Call) Run(run func()) *Guard_User_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Guard_User_Call) Return(_a0 *interface{}) *Guard_User_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Guard_User_Call) RunAndReturn(run func() *interface{}) *Guard_User_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with given fields: _a0
func (_m *Guard) Validate(_a0 map[string]string) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(map[string]string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Guard_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type Guard_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - _a0 map[string]string
func (_e *Guard_Expecter) Validate(_a0 interface{}) *Guard_Validate_Call {
	return &Guard_Validate_Call{Call: _e.mock.On("Validate", _a0)}
}

func (_c *Guard_Validate_Call) Run(run func(_a0 map[string]string)) *Guard_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]string))
	})
	return _c
}

func (_c *Guard_Validate_Call) Return(_a0 bool) *Guard_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Guard_Validate_Call) RunAndReturn(run func(map[string]string) bool) *Guard_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewGuard creates a new instance of Guard. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGuard(t interface {
	mock.TestingT
	Cleanup(func())
}) *Guard {
	mock := &Guard{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
