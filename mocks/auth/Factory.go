// Code generated by mockery. DO NOT EDIT.

package auth

import (
	auth "github.com/goravel/framework/contracts/auth"
	mock "github.com/stretchr/testify/mock"
)

// Factory is an autogenerated mock type for the Factory type
type Factory struct {
	mock.Mock
}

type Factory_Expecter struct {
	mock *mock.Mock
}

func (_m *Factory) EXPECT() *Factory_Expecter {
	return &Factory_Expecter{mock: &_m.Mock}
}

// Extend provides a mock function with given fields: _a0, _a1
func (_m *Factory) Extend(_a0 string, _a1 auth.AuthGuardFunc) auth.Factory {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Extend")
	}

	var r0 auth.Factory
	if rf, ok := ret.Get(0).(func(string, auth.AuthGuardFunc) auth.Factory); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(auth.Factory)
		}
	}

	return r0
}

// Factory_Extend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Extend'
type Factory_Extend_Call struct {
	*mock.Call
}

// Extend is a helper method to define mock.On call
//   - _a0 string
//   - _a1 auth.AuthGuardFunc
func (_e *Factory_Expecter) Extend(_a0 interface{}, _a1 interface{}) *Factory_Extend_Call {
	return &Factory_Extend_Call{Call: _e.mock.On("Extend", _a0, _a1)}
}

func (_c *Factory_Extend_Call) Run(run func(_a0 string, _a1 auth.AuthGuardFunc)) *Factory_Extend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(auth.AuthGuardFunc))
	})
	return _c
}

func (_c *Factory_Extend_Call) Return(_a0 auth.Factory) *Factory_Extend_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Factory_Extend_Call) RunAndReturn(run func(string, auth.AuthGuardFunc) auth.Factory) *Factory_Extend_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultDriver provides a mock function with given fields:
func (_m *Factory) GetDefaultDriver() auth.Guard {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultDriver")
	}

	var r0 auth.Guard
	if rf, ok := ret.Get(0).(func() auth.Guard); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(auth.Guard)
		}
	}

	return r0
}

// Factory_GetDefaultDriver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultDriver'
type Factory_GetDefaultDriver_Call struct {
	*mock.Call
}

// GetDefaultDriver is a helper method to define mock.On call
func (_e *Factory_Expecter) GetDefaultDriver() *Factory_GetDefaultDriver_Call {
	return &Factory_GetDefaultDriver_Call{Call: _e.mock.On("GetDefaultDriver")}
}

func (_c *Factory_GetDefaultDriver_Call) Run(run func()) *Factory_GetDefaultDriver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Factory_GetDefaultDriver_Call) Return(_a0 auth.Guard) *Factory_GetDefaultDriver_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Factory_GetDefaultDriver_Call) RunAndReturn(run func() auth.Guard) *Factory_GetDefaultDriver_Call {
	_c.Call.Return(run)
	return _c
}

// Guard provides a mock function with given fields: _a0
func (_m *Factory) Guard(_a0 string) auth.Guard {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Guard")
	}

	var r0 auth.Guard
	if rf, ok := ret.Get(0).(func(string) auth.Guard); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(auth.Guard)
		}
	}

	return r0
}

// Factory_Guard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Guard'
type Factory_Guard_Call struct {
	*mock.Call
}

// Guard is a helper method to define mock.On call
//   - _a0 string
func (_e *Factory_Expecter) Guard(_a0 interface{}) *Factory_Guard_Call {
	return &Factory_Guard_Call{Call: _e.mock.On("Guard", _a0)}
}

func (_c *Factory_Guard_Call) Run(run func(_a0 string)) *Factory_Guard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Factory_Guard_Call) Return(_a0 auth.Guard) *Factory_Guard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Factory_Guard_Call) RunAndReturn(run func(string) auth.Guard) *Factory_Guard_Call {
	_c.Call.Return(run)
	return _c
}

// SetDefaultDriver provides a mock function with given fields: _a0
func (_m *Factory) SetDefaultDriver(_a0 string) auth.Factory {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetDefaultDriver")
	}

	var r0 auth.Factory
	if rf, ok := ret.Get(0).(func(string) auth.Factory); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(auth.Factory)
		}
	}

	return r0
}

// Factory_SetDefaultDriver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDefaultDriver'
type Factory_SetDefaultDriver_Call struct {
	*mock.Call
}

// SetDefaultDriver is a helper method to define mock.On call
//   - _a0 string
func (_e *Factory_Expecter) SetDefaultDriver(_a0 interface{}) *Factory_SetDefaultDriver_Call {
	return &Factory_SetDefaultDriver_Call{Call: _e.mock.On("SetDefaultDriver", _a0)}
}

func (_c *Factory_SetDefaultDriver_Call) Run(run func(_a0 string)) *Factory_SetDefaultDriver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Factory_SetDefaultDriver_Call) Return(_a0 auth.Factory) *Factory_SetDefaultDriver_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Factory_SetDefaultDriver_Call) RunAndReturn(run func(string) auth.Factory) *Factory_SetDefaultDriver_Call {
	_c.Call.Return(run)
	return _c
}

// NewFactory creates a new instance of Factory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *Factory {
	mock := &Factory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
