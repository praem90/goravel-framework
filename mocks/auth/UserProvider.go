// Code generated by mockery. DO NOT EDIT.

package auth

import mock "github.com/stretchr/testify/mock"

// UserProvider is an autogenerated mock type for the UserProvider type
type UserProvider struct {
	mock.Mock
}

type UserProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *UserProvider) EXPECT() *UserProvider_Expecter {
	return &UserProvider_Expecter{mock: &_m.Mock}
}

// RehashPasswordIfNeeded provides a mock function with given fields: _a0, _a1, _a2
func (_m *UserProvider) RehashPasswordIfNeeded(_a0 interface{}, _a1 map[string]interface{}, _a2 bool) {
	_m.Called(_a0, _a1, _a2)
}

// UserProvider_RehashPasswordIfNeeded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RehashPasswordIfNeeded'
type UserProvider_RehashPasswordIfNeeded_Call struct {
	*mock.Call
}

// RehashPasswordIfNeeded is a helper method to define mock.On call
//   - _a0 interface{}
//   - _a1 map[string]interface{}
//   - _a2 bool
func (_e *UserProvider_Expecter) RehashPasswordIfNeeded(_a0 interface{}, _a1 interface{}, _a2 interface{}) *UserProvider_RehashPasswordIfNeeded_Call {
	return &UserProvider_RehashPasswordIfNeeded_Call{Call: _e.mock.On("RehashPasswordIfNeeded", _a0, _a1, _a2)}
}

func (_c *UserProvider_RehashPasswordIfNeeded_Call) Run(run func(_a0 interface{}, _a1 map[string]interface{}, _a2 bool)) *UserProvider_RehashPasswordIfNeeded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(map[string]interface{}), args[2].(bool))
	})
	return _c
}

func (_c *UserProvider_RehashPasswordIfNeeded_Call) Return() *UserProvider_RehashPasswordIfNeeded_Call {
	_c.Call.Return()
	return _c
}

func (_c *UserProvider_RehashPasswordIfNeeded_Call) RunAndReturn(run func(interface{}, map[string]interface{}, bool)) *UserProvider_RehashPasswordIfNeeded_Call {
	_c.Call.Return(run)
	return _c
}

// RetriveByCredentials provides a mock function with given fields: _a0
func (_m *UserProvider) RetriveByCredentials(_a0 map[string]interface{}) interface{} {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for RetriveByCredentials")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// UserProvider_RetriveByCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetriveByCredentials'
type UserProvider_RetriveByCredentials_Call struct {
	*mock.Call
}

// RetriveByCredentials is a helper method to define mock.On call
//   - _a0 map[string]interface{}
func (_e *UserProvider_Expecter) RetriveByCredentials(_a0 interface{}) *UserProvider_RetriveByCredentials_Call {
	return &UserProvider_RetriveByCredentials_Call{Call: _e.mock.On("RetriveByCredentials", _a0)}
}

func (_c *UserProvider_RetriveByCredentials_Call) Run(run func(_a0 map[string]interface{})) *UserProvider_RetriveByCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}))
	})
	return _c
}

func (_c *UserProvider_RetriveByCredentials_Call) Return(_a0 interface{}) *UserProvider_RetriveByCredentials_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserProvider_RetriveByCredentials_Call) RunAndReturn(run func(map[string]interface{}) interface{}) *UserProvider_RetriveByCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// RetriveById provides a mock function with given fields: _a0
func (_m *UserProvider) RetriveById(_a0 interface{}) interface{} {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for RetriveById")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(interface{}) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// UserProvider_RetriveById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetriveById'
type UserProvider_RetriveById_Call struct {
	*mock.Call
}

// RetriveById is a helper method to define mock.On call
//   - _a0 interface{}
func (_e *UserProvider_Expecter) RetriveById(_a0 interface{}) *UserProvider_RetriveById_Call {
	return &UserProvider_RetriveById_Call{Call: _e.mock.On("RetriveById", _a0)}
}

func (_c *UserProvider_RetriveById_Call) Run(run func(_a0 interface{})) *UserProvider_RetriveById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *UserProvider_RetriveById_Call) Return(_a0 interface{}) *UserProvider_RetriveById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserProvider_RetriveById_Call) RunAndReturn(run func(interface{}) interface{}) *UserProvider_RetriveById_Call {
	_c.Call.Return(run)
	return _c
}

// RetriveByToken provides a mock function with given fields: _a0
func (_m *UserProvider) RetriveByToken(_a0 interface{}) interface{} {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for RetriveByToken")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(interface{}) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// UserProvider_RetriveByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetriveByToken'
type UserProvider_RetriveByToken_Call struct {
	*mock.Call
}

// RetriveByToken is a helper method to define mock.On call
//   - _a0 interface{}
func (_e *UserProvider_Expecter) RetriveByToken(_a0 interface{}) *UserProvider_RetriveByToken_Call {
	return &UserProvider_RetriveByToken_Call{Call: _e.mock.On("RetriveByToken", _a0)}
}

func (_c *UserProvider_RetriveByToken_Call) Run(run func(_a0 interface{})) *UserProvider_RetriveByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *UserProvider_RetriveByToken_Call) Return(_a0 interface{}) *UserProvider_RetriveByToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserProvider_RetriveByToken_Call) RunAndReturn(run func(interface{}) interface{}) *UserProvider_RetriveByToken_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRememberToken provides a mock function with given fields: _a0
func (_m *UserProvider) UpdateRememberToken(_a0 interface{}) {
	_m.Called(_a0)
}

// UserProvider_UpdateRememberToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRememberToken'
type UserProvider_UpdateRememberToken_Call struct {
	*mock.Call
}

// UpdateRememberToken is a helper method to define mock.On call
//   - _a0 interface{}
func (_e *UserProvider_Expecter) UpdateRememberToken(_a0 interface{}) *UserProvider_UpdateRememberToken_Call {
	return &UserProvider_UpdateRememberToken_Call{Call: _e.mock.On("UpdateRememberToken", _a0)}
}

func (_c *UserProvider_UpdateRememberToken_Call) Run(run func(_a0 interface{})) *UserProvider_UpdateRememberToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *UserProvider_UpdateRememberToken_Call) Return() *UserProvider_UpdateRememberToken_Call {
	_c.Call.Return()
	return _c
}

func (_c *UserProvider_UpdateRememberToken_Call) RunAndReturn(run func(interface{})) *UserProvider_UpdateRememberToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateCredentials provides a mock function with given fields: _a0, _a1
func (_m *UserProvider) ValidateCredentials(_a0 interface{}, _a1 map[string]interface{}) bool {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ValidateCredentials")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}, map[string]interface{}) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UserProvider_ValidateCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateCredentials'
type UserProvider_ValidateCredentials_Call struct {
	*mock.Call
}

// ValidateCredentials is a helper method to define mock.On call
//   - _a0 interface{}
//   - _a1 map[string]interface{}
func (_e *UserProvider_Expecter) ValidateCredentials(_a0 interface{}, _a1 interface{}) *UserProvider_ValidateCredentials_Call {
	return &UserProvider_ValidateCredentials_Call{Call: _e.mock.On("ValidateCredentials", _a0, _a1)}
}

func (_c *UserProvider_ValidateCredentials_Call) Run(run func(_a0 interface{}, _a1 map[string]interface{})) *UserProvider_ValidateCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *UserProvider_ValidateCredentials_Call) Return(_a0 bool) *UserProvider_ValidateCredentials_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserProvider_ValidateCredentials_Call) RunAndReturn(run func(interface{}, map[string]interface{}) bool) *UserProvider_ValidateCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserProvider creates a new instance of UserProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserProvider {
	mock := &UserProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
